-- 005_add_sync_columns.sql
-- Add sync-related columns to metric_entries table for offline/online sync functionality

-- Add new columns to metric_entries table
ALTER TABLE metric_entries 
ADD COLUMN uuid UUID DEFAULT gen_random_uuid() UNIQUE,
ADD COLUMN backend_id INTEGER,
ADD COLUMN healthkit_id TEXT,
ADD COLUMN sync_status TEXT DEFAULT 'pendingCreate' CHECK (sync_status IN ('pendingCreate', 'pendingUpdate', 'pendingDelete', 'synced')),
ADD COLUMN modified_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN source TEXT DEFAULT 'localApp' CHECK (source IN ('localApp', 'healthKit')),
ADD COLUMN deleted_locally BOOLEAN DEFAULT FALSE,
ADD COLUMN hash_key TEXT,
ADD COLUMN sync_error TEXT;

-- Create index on uuid for faster lookups
CREATE INDEX IF NOT EXISTS idx_metric_entries_uuid ON metric_entries(uuid);

-- Create index on backend_id for sync operations
CREATE INDEX IF NOT EXISTS idx_metric_entries_backend_id ON metric_entries(backend_id);

-- Create index on healthkit_id for duplicate prevention
CREATE INDEX IF NOT EXISTS idx_metric_entries_healthkit_id ON metric_entries(healthkit_id);

-- Create index on sync_status for filtering pending sync operations
CREATE INDEX IF NOT EXISTS idx_metric_entries_sync_status ON metric_entries(sync_status);

-- Create index on hash_key for deduplication
CREATE INDEX IF NOT EXISTS idx_metric_entries_hash_key ON metric_entries(hash_key);

-- Update existing rows to have UUIDs (they will get auto-generated by the default)
UPDATE metric_entries SET uuid = gen_random_uuid() WHERE uuid IS NULL;

-- Make uuid NOT NULL after ensuring all rows have values
ALTER TABLE metric_entries ALTER COLUMN uuid SET NOT NULL;

-- Create a trigger to automatically update modified_at timestamp
CREATE OR REPLACE FUNCTION update_modified_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.modified_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply the trigger to metric_entries table
DROP TRIGGER IF EXISTS update_metric_entries_modified_at ON metric_entries;
CREATE TRIGGER update_metric_entries_modified_at
  BEFORE UPDATE ON metric_entries
  FOR EACH ROW
  EXECUTE FUNCTION update_modified_at_column();